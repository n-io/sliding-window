param num_elems: u16;
param num_pes: u16;
param pe_id: u16;

const half_pes = num_pes / 2;
const num_slide = num_pes / 4;

param fab_east_color: color;
param fab_west_color: color;

param memcpy_params: comptime_struct;

const EXIT:      local_task_id = @get_local_task_id(9);
const send_ctrl: local_task_id = @get_local_task_id(10);
const recv:      local_task_id = @get_local_task_id(11);

const iq:        input_queue = @get_input_queue(2);
const oq:        output_queue = @get_output_queue(1);

// This module is needed for memcpy infrastructure
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

const switches = @import_module("switches.csl");

// Timers
const timestamp = @import_module("<time>");
var tsc_end_buf = @zeros([timestamp.tsc_size_words]u16);
var tsc_start_buf = @zeros([timestamp.tsc_size_words]u16);

var timer_buf = @zeros([3]f32);
var ptr_timer_buf : [*]f32 = &timer_buf;

// Arrays for sliding data across fabric
var arr0 = @zeros([num_elems]f32);
const arr0_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{num_elems} -> arr0[i] });
var ptr_arr0 : [*]f32 = &arr0;

var arr1 = @zeros([num_elems]f32);
const arr1_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{num_elems} -> arr1[i] });
var ptr_arr1 : [*]f32 = &arr1;

const send_east_dsd = @get_dsd(fabout_dsd, .{.fabric_color = fab_east_color, .extent = num_elems, .output_queue = oq });
const recv_west_dsd = @get_dsd(fabin_dsd,  .{.fabric_color = fab_east_color, .extent = num_elems, .input_queue = iq });

fn main_fn() void {
  timestamp.enable_tsc();
  timestamp.get_timestamp(&tsc_start_buf);

  // Every PE in left half sends right
  if (pe_id < half_pes) {
    @fmovs(send_east_dsd, arr0_dsd, .{.async = true, .activate = send_ctrl});
  // These PEs will receive but not send
  } else if (pe_id < half_pes + num_slide) {
    @activate(recv);
  // These PEs will do nothing
  } else {
    @activate(EXIT);
  }
}

const ctrl = [1]u32 { comptime switches.ctrl(switches.switchCommands(num_pes)) };

task send_ctrl_wlt() void {
  const fabOutCtrlDsd = @get_dsd(fabout_dsd, .{
      .extent = 1,
      .control = true,
      .fabric_color = fab_east_color,
      .output_queue = oq,
      });

  var ctrl_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> ctrl[i] });
  @mov32(fabOutCtrlDsd, ctrl_dsd, .{ .async = true, .activate = recv});
}

task recv_task() void {
  if (pe_id >= num_slide) {
    @fmovs(arr1_dsd, recv_west_dsd, .{.async = true, .activate = EXIT});
  } else {
    @activate(EXIT);
  }
}

// Activated only after all data has been received
task f_exit() void {
  // stop the timer
  timestamp.get_timestamp(&tsc_end_buf);
  timestamp.disable_tsc();

  var lo_ : u16 = 0;
  var hi_ : u16 = 0;
  var word : u32 = 0;

  lo_ = tsc_start_buf[0];
  hi_ = tsc_start_buf[1];
  timer_buf[0] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

  lo_ = tsc_start_buf[2];
  hi_ = tsc_end_buf[0];
  timer_buf[1] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

  lo_ = tsc_end_buf[1];
  hi_ = tsc_end_buf[2];
  timer_buf[2] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

  // the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime {
  @bind_local_task(f_exit, EXIT);
  @bind_local_task(send_ctrl_wlt, send_ctrl);
  @bind_local_task(recv_task, recv);

  @export_symbol(ptr_arr0, "arr0");
  @export_symbol(ptr_arr1, "arr1");
  @export_symbol(ptr_timer_buf, "maxmin_time");
  @export_symbol(main_fn);

  if (@is_arch("wse3")) {
    @initialize_queue(iq, .{ .color = fab_east_color });
    @initialize_queue(oq, .{ .color = fab_east_color });
  }
}
