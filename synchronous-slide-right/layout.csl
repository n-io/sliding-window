param kernel_width: u16;
param num_elems: u16;

// Instantiate memcpy infrastructure
const memcpy = @import_module("<memcpy/get_params>", .{
  .width = kernel_width,
  .height = 1
  });

const fab_east_color = @get_color(2);
const fab_west_color = @get_color(3);

layout {
  // Use a single row of kernel_width PEs (columns=kernel_width, rows=1)
  @set_rectangle(kernel_width, 1);

  for (@range(u16, kernel_width)) |x| {
    @set_tile_code(x, 0, "pe_program.csl", .{
      .memcpy_params = memcpy.get_params(x),
      .num_elems = num_elems,
      .num_pes = kernel_width,
      .pe_id = x,
      .fab_east_color = fab_east_color,
      .fab_west_color = fab_west_color
    });

    const default_route = .{ .rx = .{ RAMP }, .tx = .{ EAST } };
    const switch_pos = .{ .pos1 = .{ .rx = WEST }, .pos2 = .{ .tx = RAMP }, .pop_mode = .{ .always_pop = true } };
    const switch_0 = @concat_structs(switch_pos, .{ .current_switch_pos = 0 }); // RAMP --> EAST
    const switch_1 = @concat_structs(switch_pos, .{ .current_switch_pos = 1 }); // WEST --> EAST
    const switch_2 = @concat_structs(switch_pos, .{ .current_switch_pos = 2 }); // RAMP --> WEST

    //  PE at 3/4*width - 1 in pos 2
    //  PEs from 1/2*width to 3/4*width - 2 in pos 1
    //  All other PEs in pos 0

    // Assume kernel width is 2^p = 2^3 = 8
    // In initial positions:
    //   PE at 2^p - 2^(p-2) - 1 = 3/4*width - 1 = 5 in pos2
    //   PE at 2^p - 2^(p-2) - 2 = 3/4*width - 2 = 4 in pos1
    //   All other PEs in pos0

    if (x < kernel_width*1/2) {
      @set_color_config(x, 0, fab_east_color, .{ .routes = default_route, .switches = switch_0 });
    } else if (x < kernel_width*3/4 - 1) {
      @set_color_config(x, 0, fab_east_color, .{ .routes = default_route, .switches = switch_1 });
    } else if (x == kernel_width*3/4 - 1) {
      @set_color_config(x, 0, fab_east_color, .{ .routes = default_route, .switches = switch_2 });
    } else {
      @set_color_config(x, 0, fab_east_color, .{ .routes = default_route, .switches = switch_0 });
    }
  }

  @export_name("arr0", [*]f32, true);
  @export_name("arr1", [*]f32, true);
  @export_name("maxmin_time", [*]f32, true);
  @export_name("main_fn", fn()void);
}
